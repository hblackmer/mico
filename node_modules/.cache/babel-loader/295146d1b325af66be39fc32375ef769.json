{"ast":null,"code":"var _jsxFileName = \"/Users/helene/Desktop/Projects/mico-react/src/components/Timer/Timer.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TimerComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      time: 0\n    };\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      const time = new Date().getTime() - new Date(this.props.callQueuedTime).getTime();\n      this.setState({\n        time\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: this.state.time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/helene/Desktop/Projects/mico-react/src/components/Timer/Timer.js"],"names":["React","Component","TimerComponent","state","time","componentDidMount","intervalId","setInterval","Date","getTime","props","callQueuedTime","setState","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACC,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACxDE,KADwD,GAChD;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADgD;AAAA;;AAGxDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAChC,YAAMH,IAAI,GACN,IAAII,IAAJ,GAAWC,OAAX,KAAuB,IAAID,IAAJ,CAAS,KAAKE,KAAL,CAAWC,cAApB,EAAoCF,OAApC,EAD3B;AAEA,WAAKG,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACH,KAJ4B,EAI1B,IAJ0B,CAA7B;AAKH;;AACDS,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKR,UAAN,CAAb;AACH;;AACDS,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA,gBAAI,KAAKZ,KAAL,CAAWC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAfuD","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TimerComponent extends React.Component {\n    state = { time: 0 };\n\n    componentDidMount() {\n        this.intervalId = setInterval(() => {\n            const time =\n                new Date().getTime() - new Date(this.props.callQueuedTime).getTime();\n            this.setState({ time });\n        }, 1000);\n    }\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n    render() {\n        return <p>{this.state.time}</p>;\n    }\n}"]},"metadata":{},"sourceType":"module"}