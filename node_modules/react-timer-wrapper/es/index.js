function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cleanProps from 'clean-react-props';

var TimerWrapper = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TimerWrapper, _Component);

  function TimerWrapper(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      duration: props.duration,
      startTime: props.active ? Date.now() - props.time : null,
      time: props.time
    };
    _this.tick = _this.tick.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = TimerWrapper.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$state = this.state,
        duration = _this$state.duration,
        startTime = _this$state.startTime,
        time = _this$state.time;
    var _this$props = this.props,
        active = _this$props.active,
        onStart = _this$props.onStart;

    if (active) {
      onStart({
        duration: duration,
        progress: this.getProgress(time),
        time: time
      });
      this.animationFrame = requestAnimationFrame(this.tick);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    var _this$props2 = this.props,
        active = _this$props2.active,
        duration = _this$props2.duration,
        time = _this$props2.time,
        onStart = _this$props2.onStart,
        onStop = _this$props2.onStop;

    if (prevProps.active === active && prevProps.time !== time && time !== this.state.time) {
      var timeDiff = this.state.time - time;
      this.setState({
        startTime: this.state.startTime + timeDiff,
        time: this.state.time + timeDiff
      });
      return;
    }

    if (prevProps.active !== active) {
      switch (active) {
        case true:
          var nextTime = duration !== null && this.state.time >= duration ? 0 : this.state.time;
          this.setState({
            startTime: Date.now() - nextTime,
            time: nextTime
          }, function () {
            onStart({
              duration: duration,
              progress: _this2.getProgress(nextTime),
              time: nextTime
            });
            _this2.animationFrame = requestAnimationFrame(_this2.tick);
          });
          break;

        case false:
          cancelAnimationFrame(this.animationFrame);
          onStop({
            duration: duration,
            progress: this.getProgress(this.state.time),
            time: this.state.time
          });
          break;
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    cancelAnimationFrame(this.animationFrame);
  };

  _proto.getProgress = function getProgress(time) {
    var duration = this.state.duration;

    if (!duration) {
      return 0;
    }

    return Math.max(0, Math.min(1, time / duration));
  };

  _proto.tick = function tick() {
    var _this3 = this;

    var _this$props3 = this.props,
        duration = _this$props3.duration,
        loop = _this$props3.loop,
        time = _this$props3.time,
        onFinish = _this$props3.onFinish,
        onTimeUpdate = _this$props3.onTimeUpdate,
        onStart = _this$props3.onStart;
    var startTime = this.state.startTime;
    var nextTime = Date.now() - startTime;
    this.setState({
      time: nextTime
    }, function () {
      onTimeUpdate({
        duration: duration,
        progress: _this3.getProgress(nextTime),
        time: nextTime
      });

      if (duration !== null && nextTime >= duration) {
        onFinish({
          duration: duration,
          progress: _this3.getProgress(nextTime),
          time: nextTime
        });

        if (!loop) {
          cancelAnimationFrame(_this3.animationFrame);
          return;
        }

        nextTime = 0;
        onStart({
          duration: duration,
          progress: 0,
          time: nextTime
        });

        _this3.setState({
          startTime: Date.now()
        });
      }

      _this3.animationFrame = requestAnimationFrame(_this3.tick);
    });
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        children = _this$props4.children,
        component = _this$props4.component,
        duration = _this$props4.duration;
    var time = this.state.time;
    var progress = duration && time ? time / duration : 0;
    var clonedChildren = React.Children.toArray(children).map(function (child, childIndex) {
      return /*#__PURE__*/React.cloneElement(child, {
        duration: duration,
        time: time,
        progress: progress
      });
    });
    return /*#__PURE__*/React.createElement(component, _objectSpread({}, cleanProps(this.props)), clonedChildren);
  };

  return TimerWrapper;
}(Component);

TimerWrapper.propTypes = {
  active: PropTypes.bool,
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  duration: PropTypes.number,
  loop: PropTypes.bool,
  time: PropTypes.number,
  onFinish: PropTypes.func,
  onTimeUpdate: PropTypes.func,
  onStart: PropTypes.func
};
TimerWrapper.defaultProps = {
  active: false,
  component: 'div',
  duration: 10000,
  loop: false,
  time: 0,
  onFinish: function onFinish() {},
  onStart: function onStart() {},
  onStop: function onStop() {},
  onTimeUpdate: function onTimeUpdate() {}
};
export default TimerWrapper;