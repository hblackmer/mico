"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cleanReactProps = _interopRequireDefault(require("clean-react-props"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var SECOND = 1000;
var MINUTE = 60 * 1000;
var HOUR = 60 * 60 * 1000;

var Timecode = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Timecode, _Component);

  function Timecode() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Timecode.prototype;

  _proto.pad = function pad(number, length) {
    if (length === void 0) {
      length = 2;
    }

    var numberLength = number.toString().length;

    if (numberLength < length) {
      var diff = length - numberLength;
      var padding = '';

      while (padding.length < diff) {
        padding += '0';
      }

      return "" + padding + number;
    }

    return number;
  };

  _proto.formatMilliseconds = function formatMilliseconds(milliseconds, length) {
    if (length === void 0) {
      length = 3;
    }

    return this.pad((milliseconds / 1000).toFixed(length) * 1000, length);
  };

  _proto.formatTimecode = function formatTimecode(_ref) {
    var hours = _ref.hours,
        minutes = _ref.minutes,
        seconds = _ref.seconds,
        milliseconds = _ref.milliseconds;
    var format = this.props.format;

    switch (format) {
      case 'HH:mm:ss.SSS':
        return this.pad(hours) + ":" + this.pad(minutes) + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);

      case 'H:mm:ss.SSS':
        return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);

      case 'H:?mm:ss.SSS':
        if (hours) {
          return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);
        }

        return this.pad(minutes) + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);

      case 'H:?m:ss.SSS':
        if (hours) {
          return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);
        }

        return minutes + ":" + this.pad(seconds) + "." + this.formatMilliseconds(milliseconds);

      case 'HH:mm:ss':
        return this.pad(hours) + ":" + this.pad(minutes) + ":" + this.pad(seconds);

      case 'H:mm:ss':
        return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds);

      case 'H:?mm:ss':
        if (hours) {
          return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds);
        }

        return this.pad(minutes) + ":" + this.pad(seconds);

      case 'H:mm':
        return hours + ":" + this.pad(minutes);

      case 's.SSS':
        return seconds + "." + this.formatMilliseconds(milliseconds);

      case 's.SS':
        return seconds + "." + this.formatMilliseconds(milliseconds, 2);

      case 'H:?m:ss':
      default:
        if (hours) {
          return hours + ":" + this.pad(minutes) + ":" + this.pad(seconds);
        }

        return minutes + ":" + this.pad(seconds);
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        component = _this$props.component,
        prefix = _this$props.prefix,
        postfix = _this$props.postfix,
        time = _this$props.time;
    var milliseconds = time;
    var hours = milliseconds >= HOUR ? Math.floor(milliseconds / HOUR) : 0;

    if (hours) {
      milliseconds -= hours * HOUR;
    }

    var minutes = milliseconds >= MINUTE ? Math.floor(milliseconds / MINUTE) : 0;

    if (minutes) {
      milliseconds -= minutes * MINUTE;
    }

    var seconds = milliseconds >= SECOND ? Math.floor(milliseconds / SECOND) : 0;

    if (seconds) {
      milliseconds -= seconds * SECOND;
    }

    return _react["default"].createElement(component, _objectSpread({}, (0, _cleanReactProps["default"])(this.props, ['prefix', 'postfix'])), ["" + prefix + this.formatTimecode({
      hours: hours,
      minutes: minutes,
      seconds: seconds,
      milliseconds: milliseconds
    }) + postfix]);
  };

  return Timecode;
}(_react.Component);

Timecode.propTypes = {
  component: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string]),
  format: _propTypes["default"].string,
  prefix: _propTypes["default"].string,
  postfix: _propTypes["default"].string,
  time: _propTypes["default"].number
};
Timecode.defaultProps = {
  component: 'span',
  format: 'H:?m:ss',
  prefix: '',
  postfix: '',
  time: 0
};
var _default = Timecode;
exports["default"] = _default;